/// <reference types="node" />
import { EventEmitter } from "events";
import { AdapterResults, SQLAdapter, operationKeys } from "../types/adapter";
import { DevLogsOptions, AdapterSetting, DisplayOptions, MigrationParams } from "../types/adapter";
export declare class sqlAdapter extends EventEmitter implements SQLAdapter {
    devLogs: DevLogsOptions;
    constructor(options: AdapterSetting);
    load(dataname: string): Promise<AdapterResults>;
    createTable(dataname: string, tableName: string, tableDefinition: string): Promise<AdapterResults>;
    insertData(dataname: string, tableName: string, data: any[]): Promise<AdapterResults>;
    find(dataname: string, tableName: string, condition?: string): Promise<AdapterResults>;
    removeData(dataname: string, tableName: string, dataToRemove: any[]): Promise<AdapterResults>;
    removeKey(dataname: string, tableName: string, keyToRemove: string): Promise<AdapterResults>;
    update(dataname: string, tableName: string, query: any, newData: operationKeys): Promise<AdapterResults>;
    allData(dataname: string, displayOption: DisplayOptions): Promise<AdapterResults>;
    updateMany(dataname: string, tableName: string, queries: any[], newData: operationKeys): Promise<AdapterResults>;
    drop(dataname: string, tableName?: string): Promise<AdapterResults>;
    countDoc(dataname: string, tableName: string): Promise<AdapterResults>;
    countTable(dataname: string): Promise<AdapterResults>;
    dataSize(dataname: string): Promise<AdapterResults>;
    migrateTable({ from, to, table, }: MigrationParams): Promise<AdapterResults>;
    toJSON(from: string): Promise<AdapterResults>;
    private tableExists;
    private countDocuments;
    private parseSQLToJson;
    private parseRowData;
    private parseColumnValue;
    private generateQueryFromData;
    private checkDataMatch;
    private extractAllData;
    private applyUpdateToRow;
    private removeColumnFromRows;
    private extractTable;
    private writeTableToNewFile;
    private countTables;
    private removeFullData;
    private removeTable;
    private executeSelectQuery;
    extractRowData(line: string): string | null;
    checkQueryMatches(line: string | null, query: any): boolean;
    generateNewRow(query: any, newData: operationKeys, columns: string[]): string;
    findTableIndex(lines: string[], tableName: string): number;
}
